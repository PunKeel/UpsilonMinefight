package fr.ungeek.Upsilon;

import fr.ungeek.Upsilon.events.GameQuitEvent;
import fr.ungeek.Upsilon.events.GameStartEvent;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.GameMode;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;

/**
 * User: PunKeel
 * Date: 5/12/13
 * Time: 3:33 PM
 * May be open-source & be sold (by PunKeel, of course !)
 */
public class GameManager implements Listener {

	HashMap<String, JEUX> participants = new HashMap<String, JEUX>();
	String TAG = ChatColor.DARK_AQUA + "[" + ChatColor.DARK_GREEN + "Kynset" + ChatColor.DARK_AQUA + "] " + ChatColor.RESET;
	ETAPES etat = ETAPES.OFF;
	Integer joueurs_max = 20;
	Main main;

	public GameManager(Main m) {
		main = m;
	}

	@EventHandler
	public void onQuit(PlayerQuitEvent e) {
		String name = e.getPlayer().getName();
		if (participants.containsKey(name)) {
			JEUX jeu = participants.get(name);
			participants.remove(name);
			GameQuitEvent event = new GameQuitEvent(jeu, name);
			Bukkit.getServer().getPluginManager().callEvent(event);

		}
	}

	void rejoindre(CommandSender sender) {
		if (etat.equals(ETAPES.JOIN)) {
			if (participants.contains(sender.getName())) {
				sender.sendMessage(TAG + ChatColor.DARK_GREEN + "Tu es déjà participant :)");
			} else {
				broadcastParticipants(sender.getName() + " a rejoint la partie");
				participants.add(sender.getName());
				sender.sendMessage(TAG + ChatColor.DARK_GREEN + "Tu es désormais un participant !");
				sender.sendMessage(TAG + ChatColor.DARK_GREEN + "Participants (" + participants.size() + "/" + joueurs_max + ") : ");
				for (String s : participants) {
					sender.sendMessage(" - " + s);
				}
				if (participants.size() >= joueurs_max) {
					debuter();
				}
			}
		} else if (etat.equals(ETAPES.STARTED)) {
			sender.sendMessage(TAG + ChatColor.DARK_RED + "Une partie est déjà en cours ! :(");
		} else if (etat.equals(ETAPES.OFF)) {
			sender.sendMessage(TAG + ChatColor.DARK_RED + "Aucune partie pour le moment, repasses plus tard ! :)");
		}
	}

	void broadcastParticipants(String message) {
		for (String s : participants) {
			Bukkit.getPlayerExact(s).sendMessage(TAG + message);
		}
	}

	void broadcastAdmins(String message) {
		for (Player s : Bukkit.getOnlinePlayers()) {
			if (s.isOp())
				s.sendMessage(TAG + message);
		}
	}

	@EventHandler
	void onDeath(PlayerDeathEvent e) {
		if (participants.contains(e.getEntity().getName())) {
			e.getEntity().sendMessage(TAG + ChatColor.DARK_RED + "Tu es mort, donc exclu de la partie.");
			participants.remove(e.getEntity().getName());
			if (participants.size() == 0) {
				Bukkit.broadcastMessage(TAG + "Fin de la partie, tout le monde est mort !");
			}
		}
	}

	void debuter() {
		etat = ETAPES.STARTED;
		int i = 0;
		for (String s : participants) {
			Bukkit.dispatchCommand(Bukkit.getConsoleSender(), String.format("warp %s %s", "kynset" + (1 + (i % 4)), s));
			i++;
			Player p = Bukkit.getPlayerExact(s);
			p.setGameMode(GameMode.ADVENTURE);
			p.setHealth(p.getMaxHealth());
			p.setFoodLevel(20);
			p.setAllowFlight(false);
			p.setFlying(false);
		}
	}

	void stopper() {
		etat = ETAPES.OFF;
		participants.clear();
		Bukkit.broadcastMessage(TAG + ChatColor.DARK_GREEN + "Partie terminée !");
	}

	@Override
	public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
		if (!command.getName().equalsIgnoreCase("kynset")) return false;
		boolean senderIsAdmin = false;
		if (sender.getName().equalsIgnoreCase("dleot")) senderIsAdmin = true;
		else if (sender.isOp()) senderIsAdmin = true;
		else if (sender.hasPermission("upsilon.kynset.admin")) senderIsAdmin = true;
		if (!senderIsAdmin) {
			broadcastAdmins(sender.getName() + ":join");
			rejoindre(sender);
			return true;
		} else {
			if (args.length == 0) {
				sender.sendMessage(TAG + "Usage : /kynset [join|init|start|stop]");
			} else {
				String fonction = args[0].toLowerCase().trim();
				if (fonction.equalsIgnoreCase("join")) {
					rejoindre(sender);
					return true;
				} else if (fonction.equals("init")) {
					if (args.length != 2) {
						sender.sendMessage(TAG + "Usage : /kynset init [nombre joueurs]");
					} else {
						Integer joueurs = 20;
						try {
							joueurs = Integer.parseInt(args[1]);
						} catch (NumberFormatException e) {
							sender.sendMessage(TAG + ChatColor.DARK_RED + "On dirait que " + args[1] + " n'est pas un nombre :(");
						}
						if (etat == ETAPES.OFF) {
							broadcastAdmins("Init(" + joueurs + ") par " + sender.getName());
							joueurs_max = joueurs;
							etat = ETAPES.JOIN;
							sender.sendMessage(TAG + "Ouverture des participations, " + joueurs.toString() + " joueur(s)");
						} else if (etat == ETAPES.JOIN || etat == ETAPES.STARTED) {
							sender.sendMessage(TAG + ChatColor.DARK_RED + "Une partie est déjà en cours");
						}
					}
				} else if (fonction.equals("start")) {
					if (etat == ETAPES.JOIN) {
						broadcastAdmins("Start par " + sender.getName());
						debuter();
						sender.sendMessage(TAG + "Lancement de la partie avec " + participants.size() + " joueurs / " + joueurs_max);
					} else if (etat == ETAPES.OFF || etat == ETAPES.STARTED) {
						sender.sendMessage(TAG + ChatColor.DARK_RED + "Une partie est déjà en cours [OU] pas initiée");
					}
				} else if (fonction.equals("stop")) {
					if (etat == ETAPES.STARTED) {
						broadcastAdmins("Stop par " + sender.getName());
						stopper();
						sender.sendMessage(TAG + ChatColor.DARK_RED + "Arrêt de la partie");
					} else if (etat == ETAPES.OFF || etat == ETAPES.JOIN) {
						sender.sendMessage(TAG + ChatColor.DARK_RED + "Aucune partie en cours");
					}
				} else {
					sender.sendMessage(TAG + ChatColor.DARK_RED + "commande inconnue");
				}
			}

		}

		return false;
	}

	enum ETAPES {OFF, JOIN, STARTED}
	public enum JEUX {RoiAuSommet}


}
